#!/bin/bash

set -e -u

declare -r version=1

export LOCALVERSION="-GracefulLinux"

# 常用变量
work_dir=$(dirname $(realpath -- $0))

quiet=n
append_date=$(date "+%Y%m%d")
app_name="linux-config"
_f_config="$work_dir/config"
_f_kernel_source="/data/source/kernel"
out_dir="${work_dir}/out/${append_date}"

systemmap="$out_dir/System.map"
grub_config="/boot/grub/grub.cfg"

# 会改变的值
kernel_version=""
kernel_name="vmlinux-${kernel_version}-$(uname -m)"
initramfs_name="initramfs-${kernel_version}-$(uname -m).img"
module="$out_dir/lib/modules/${kernel_version}"
kernel="$out_dir/${kernel_name}"
initramfs="$out_dir/${initramfs_name}"
canrun=

# 输出信息
_msg_info() 
{
    local _msg="${1}"
    if [[ ${app_name} == '' ]]; then
        [[ "${quiet}" == "y" ]] || printf '\033[32m信息: %s\033[0m\n' "${_msg}" | sed ':label;N;s/\n/ /g;b label' | sed 's/[ ][ ]*/ /g'
    else
        [[ "${quiet}" == "y" ]] || printf '\033[32m[%s] 信息: %s\033[0m\n' "${app_name}" "${_msg}" | sed ':label;N;s/\n/ /g;b label' | sed 's/[ ][ ]*/ /g'
    fi
}

# 输出信息
_msg_info_pure() 
{
    local _msg="${1}"
    local f="${2-x}"
    if [ $f = 'x' ]; then
        printf '\033[32m%s\033[0m\n' "${_msg}" 
    else
        printf '\033[32m%s\033[0m' "${_msg}" 
    fi
}

# 输出警告
_msg_warning()
{
    local _msg="${1}"
    if [[ ${app_name} == '' ]]; then
        printf '\033[33m警告: %s\033[0m\n' "${_msg}" >&2
    else
        printf '\033[33m[%s] 警告: %s\033[0m\n' "${app_name}" "${_msg}" >&2
    fi
}

# 输出错误
_msg_error()
{
    local _msg="${1}"
    local _error="${2}"
    if [[ ${app_name} == '' ]]; then
        printf '\033[31m错误: %s\033[0m\n' "${_msg}" >&2
    else
        printf '\033[31m[%s] 错误: %s\033[0m\n' "${app_name}" "${_msg}" >&2
    fi

    if (( _error != 0 )); then
        exit "${_error}"
    fi
}

in_array() {
    # Search for an element in an array.
    #   $1: needle
    #   ${@:2}: haystack

    local item= needle=$1; shift

    for item in "$@"; do
        [[ $item = $needle ]] && return 0 # Found
    done
    return 1 # Not Found
}

index_of() {
    # get the array index of an item. sets the global var _idx with
    # index and returns 0 if found, otherwise returns 1.
    local item=$1; shift

    for (( _idx=1; _idx <= $#; _idx++ )); do
        if [[ $item = ${!_idx} ]]; then
            (( --_idx ))
            return 0
        fi
    done

    # not found
    unset _idx
    return 1
}

funcgrep() {
    awk -v funcmatch="$1" '
        /^[[:space:]]*[[:alnum:]_]+[[:space:]]*\([[:space:]]*\)/ {
            match($1, funcmatch)
            print substr($1, RSTART, RLENGTH)
        }' "$2"
}

list_hookpoints() {
    local funcs script

    script=$(PATH=$_d_hooks type -P "$1") || return 0

    mapfile -t funcs < <(funcgrep '^run_[[:alnum:]_]+' "$script")

    echo
    msg "This hook has runtime scripts:"
    in_array run_earlyhook "${funcs[@]}" && msg2 "early hook"
    in_array run_hook "${funcs[@]}" && msg2 "pre-mount hook"
    in_array run_latehook "${funcs[@]}" && msg2 "post-mount hook"
    in_array run_cleanuphook "${funcs[@]}" && msg2 "cleanup hook"
}

modprobe() {
    command modprobe -d "$_optmoduleroot" -S "$KERNELVERSION" "$@"
}

auto_modules() {
    # Perform auto detection of modules via sysfs.

    local mods=

    mapfile -t mods < <(find /sys/devices -name uevent \
        -exec sort -u {} + | awk -F= '$1 == "MODALIAS" && !_[$0]++')
    mapfile -t mods < <(modprobe -qaR "${mods[@]#MODALIAS=}")

    (( ${#mods[*]} )) && printf "%s\n" "${mods[@]//-/_}"
}

all_modules() {
    # Add modules to the initcpio, filtered by grep.
    #   $@: filter arguments to grep
    #   -f FILTER: ERE to filter found modules

    local -i count=0
    local mod= OPTIND= OPTARG= filter=()

    while getopts ':f:' flag; do
        case $flag in f) filter+=("$OPTARG") ;; esac
    done
    shift $(( OPTIND - 1 ))

    while read -r -d '' mod; do
        (( ++count ))

        for f in "${filter[@]}"; do
            [[ $mod =~ $f ]] && continue 2
        done

        mod=${mod##*/}
        mod="${mod%.ko*}"
        printf '%s\n' "${mod//-/_}"
    done < <(find "$_d_kmoduledir" -name '*.ko*' -print0 2>/dev/null | grep -EZz "$@")

    (( count ))
}

add_all_modules() {
    # Add modules to the initcpio.
    #   $@: arguments to all_modules

    local mod mods

    mapfile -t mods < <(all_modules "$@")
    map add_module "${mods[@]}"

    return $(( !${#mods[*]} ))
}

add_checked_modules() {
    # Add modules to the initcpio, filtered by the list of autodetected
    # modules.
    #   $@: arguments to all_modules

    local mod mods

    if (( ${#_autodetect_cache[*]} )); then
        mapfile -t mods < <(all_modules "$@" | grep -xFf <(printf '%s\n' "${!_autodetect_cache[@]}"))
    else
        mapfile -t mods < <(all_modules "$@")
    fi

    map add_module "${mods[@]}"

    return $(( !${#mods[*]} ))
}

add_firmware() {
    # add a firmware file to the image.
    #   $1: firmware path fragment

    local fw fwpath r=1

    for fw; do
        for fwpath in "${_d_firmware[@]}"; do
            if [[ -f $fwpath/$fw.xz ]]; then
                add_file "$fwpath/$fw.xz" "$fwpath/$fw.xz" 644 && r=0
                break
            elif [[ -f $fwpath/$fw ]]; then
                add_file "$fwpath/$fw" "$fwpath/$fw" 644 && r=0
                break
            fi
        done
    done

    return $r
}

add_module() {
    # Add a kernel module to the initcpio image. Dependencies will be
    # discovered and added.
    #   $1: module name

    local target= module= softdeps= deps= field= value= firmware=()
    local ign_errors=0 found=0

    [[ $KERNELVERSION == none ]] && return 0

    if [[ $1 = *\? ]]; then
        ign_errors=1
        set -- "${1%?}"
    fi

    target=${1%.ko*} target=${target//-/_}

    # skip expensive stuff if this module has already been added
    (( _addedmodules["$target"] == 1 )) && return

    while IFS=':= ' read -r -d '' field value; do
        case "$field" in
            filename)
                # Only add modules with filenames that look like paths (e.g.
                # it might be reported as "(builtin)"). We'll defer actually
                # checking whether or not the file exists -- any errors can be
                # handled during module install time.
                if [[ $value = /* ]]; then
                    found=1
                    module=${value##*/} module=${module%.ko*}
                    quiet "adding module: %s (%s)" "$module" "$value"
                    _modpaths["$value"]=1
                    _addedmodules["${module//-/_}"]=1
                fi
                ;;
            depends)
                IFS=',' read -r -a deps <<< "$value"
                map add_module "${deps[@]}"
                ;;
            firmware)
                firmware+=("$value")
                ;;
            softdep)
                read -ra softdeps <<<"$value"
                for module in "${softdeps[@]}"; do
                    [[ $module == *: ]] && continue
                    add_module "$module?"
                done
                ;;
        esac
    done < <(modinfo -b "$_optmoduleroot" -k "$KERNELVERSION" -0 "$target" 2>/dev/null)

    if (( !found )); then
        (( ign_errors || _addedmodules["$target"] )) && return 0
        error "module not found: \`%s'" "$target"
        return 1
    fi

    if (( ${#firmware[*]} )); then
        add_firmware "${firmware[@]}" ||
            warning 'Possibly missing firmware for module: %s' "$target"
    fi

    # handle module quirks
    case $target in
        fat)
            add_module "nls_ascii?" # from CONFIG_FAT_DEFAULT_IOCHARSET
            add_module "nls_cp437?" # from CONFIG_FAT_DEFAULT_CODEPAGE
            ;;
        ocfs2)
            add_module "configfs?"
            ;;
        btrfs)
            add_module "libcrc32c?"
            ;;
        f2fs)
            add_module "crypto-crc32?"
            ;;
        ext4)
            add_module "crypto-crc32c?"
            ;;
    esac
}

add_full_dir() {
    # Add a directory and all its contents, recursively, to the initcpio image.
    # No parsing is performed and the contents of the directory is added as is.
    #   $1: path to directory
    #   $2: glob pattern to filter file additions (optional)
    #   $3: path prefix that will be stripped off from the image path (optional)

    local f= filter=${2:-*} strip_prefix=$3

    if [[ -n $1 && -d $1 ]]; then
        add_dir "$1"

        for f in "$1"/*; do
            if [[ -L $f ]]; then
                if [[ $f = $filter ]]; then
                    add_symlink "${f#$strip_prefix}" "$(readlink "$f")"
                fi
            elif [[ -d $f ]]; then
                add_full_dir "$f" "$filter" "$strip_prefix"
            elif [[ -f $f ]]; then
                if [[ $f = $filter ]]; then
                    add_file "$f" "${f#$strip_prefix}"
                fi
            fi
        done
    fi
}

add_dir() {
    # add a directory (with parents) to $BUILDROOT
    #   $1: pathname on initcpio
    #   $2: mode (optional)

    if [[ -z $1 || $1 != /?* ]]; then
        return 1
    fi

    local path=$1 mode=${2:-755}

    if [[ -d $BUILDROOT$1 ]]; then
        # ignore dir already exists
        return 0
    fi

    quiet "adding dir: %s" "$path"
    command install -dm$mode "$BUILDROOT$path"
}

add_symlink() {
    # Add a symlink to the initcpio image. There is no checking done
    # to ensure that the target of the symlink exists.
    #   $1: pathname of symlink on image
    #   $2: absolute path to target of symlink (optional, can be read from $1)

    local name=$1 target=$2

    (( $# == 1 || $# == 2 )) || return 1

    if [[ -z $target ]]; then
        target=$(readlink -f "$name")
        if [[ -z $target ]]; then
            error 'invalid symlink: %s' "$name"
            return 1
        fi
    fi

    add_dir "${name%/*}"

    if [[ -L $BUILDROOT$1 ]]; then
        quiet "overwriting symlink %s -> %s" "$name" "$target"
    else
        quiet "adding symlink: %s -> %s" "$name" "$target"
    fi
    ln -sfn "$target" "$BUILDROOT$name"
}

add_file() {
    # Add a plain file to the initcpio image. No parsing is performed and only
    # the singular file is added.
    #   $1: path to file
    #   $2: destination on initcpio (optional, defaults to same as source)
    #   $3: mode

    (( $# )) || return 1

    # determine source and destination
    local src=$1 dest=${2:-$1} mode=

    if [[ ! -f $src ]]; then
        error "file not found: \`%s'" "$src"
        return 1
    fi

    mode=${3:-$(stat -c %a "$src")}
    if [[ -z $mode ]]; then
        error "failed to stat file: \`%s'." "$src"
        return 1
    fi

    if [[ -e $BUILDROOT$dest ]]; then
        quiet "overwriting file: %s" "$dest"
    else
        quiet "adding file: %s" "$dest"
    fi
    command install -Dm$mode "$src" "$BUILDROOT$dest"
}

add_runscript() {
    # Adds a runtime script to the initcpio image. The name is derived from the
    # script which calls it as the basename of the caller.

    local funcs fn script hookname=${BASH_SOURCE[1]##*/}

    if ! script=$(PATH=$_d_hooks type -P "$hookname"); then
        error "runtime script for \`%s' not found" "$hookname"
        return
    fi

    add_file "$script" "/hooks/$hookname" 755

    mapfile -t funcs < <(funcgrep '^run_[[:alnum:]_]+' "$script")

    for fn in "${funcs[@]}"; do
        case $fn in
            run_earlyhook)
                _runhooks['early']+=" $hookname"
                ;;
            run_hook)
                _runhooks['hooks']+=" $hookname"
                ;;
            run_latehook)
                _runhooks['late']+=" $hookname"
                ;;
            run_cleanuphook)
                _runhooks['cleanup']="$hookname ${_runhooks['cleanup']}"
                ;;
        esac
    done
}

add_binary() {
    # Add a binary file to the initcpio image. library dependencies will
    # be discovered and added.
    #   $1: path to binary
    #   $2: destination on initcpio (optional, defaults to same as source)

    local -a sodeps
    local line= regex= binary= dest= mode= sodep= resolved=

    if [[ ${1:0:1} != '/' ]]; then
        binary=$(type -P "$1")
    else
        binary=$1
    fi

    if [[ ! -f $binary ]]; then
        error "file not found: \`%s'" "$1"
        return 1
    fi

    dest=${2:-$binary}
    mode=$(stat -c %a "$binary")

    # always add the binary itself
    add_file "$binary" "$dest" "$mode"

    # negate this so that the RETURN trap is not fired on non-binaries
    ! lddout=$(ldd "$binary" 2>/dev/null) && return 0

    # resolve sodeps
    regex='^(|.+ )(/.+) \(0x[a-fA-F0-9]+\)'
    while read -r line; do
        if [[ $line =~ $regex ]]; then
            sodep=${BASH_REMATCH[2]}
        elif [[ $line = *'not found' ]]; then
            error "binary dependency \`%s' not found for \`%s'" "${line%% *}" "$1"
            (( ++_builderrors ))
            continue
        fi

        if [[ -f $sodep && ! -e $BUILDROOT$sodep ]]; then
            add_file "$sodep" "$sodep" "$(stat -Lc %a "$sodep")"
        fi
    done <<< "$lddout"

    return 0
}

parse_config() {
    # parse key global variables set by the config file.

    map add_module "${MODULES[@]}"
    map add_binary "${BINARIES[@]}"
    map add_file "${FILES[@]}"

    tee "$BUILDROOT/buildconfig" < "$1" | {
        # When MODULES is not an array (but instead implicitly converted at
        # startup), sourcing the config causes the string value of MODULES
        # to be assigned as MODULES[0]. Avoid this by explicitly unsetting
        # MODULES before re-sourcing the config.
        unset MODULES

        . /dev/stdin

        # arrayize MODULES if necessary.
        [[ ${MODULES@a} != *a* ]] && read -ra MODULES <<<"${MODULES//-/_}"

        for mod in "${MODULES[@]%\?}"; do
            mod=${mod//-/_}
            # only add real modules (2 == builtin)
            (( _addedmodules["$mod"] == 1 )) && add+=("$mod")
        done
        (( ${#add[*]} )) && printf 'MODULES="%s"\n' "${add[*]}"

        printf '%s="%s"\n' \
            'EARLYHOOKS' "${_runhooks['early']# }" \
            'HOOKS' "${_runhooks['hooks']# }" \
            'LATEHOOKS' "${_runhooks['late']# }" \
            'CLEANUPHOOKS' "${_runhooks['cleanup']% }"
    } >"$BUILDROOT/config"
}

initialize_buildroot() {
    # creates a temporary directory for the buildroot and initialize it with a
    # basic set of necessary directories and symlinks

    local workdir= kernver=$1 arch=$(uname -m) buildroot

    if ! workdir=$(mktemp -d --tmpdir mkinitcpio.XXXXXX); then
        error 'Failed to create temporary working directory in %s' "${TMPDIR:-/tmp}"
        return 1
    fi
    buildroot=${2:-$workdir/root}

    if [[ ! -w ${2:-$workdir} ]]; then
        error 'Unable to write to build root: %s' "$buildroot"
        return 1
    fi

    # base directory structure
    install -dm755 "$buildroot"/{new_root,proc,sys,dev,run,tmp,var,etc,usr/{local,lib,bin}}
    ln -s "usr/lib" "$buildroot/lib"
    ln -s "../lib"  "$buildroot/usr/local/lib"
    ln -s "bin"     "$buildroot/usr/sbin"
    ln -s "usr/bin" "$buildroot/bin"
    ln -s "usr/bin" "$buildroot/sbin"
    ln -s "../bin"  "$buildroot/usr/local/bin"
    ln -s "../bin"  "$buildroot/usr/local/sbin"
    ln -s "/run"    "$buildroot/var/run"

    case $arch in
        x86_64)
            ln -s "lib"     "$buildroot/usr/lib64"
            ln -s "usr/lib" "$buildroot/lib64"
            ;;
    esac

    # mkinitcpio version stamp
    printf '%s' "$version" >"$buildroot/VERSION"

    # kernel module dir
    [[ $kernver != none ]] && install -dm755 "$buildroot/usr/lib/modules/$kernver/kernel"

    # mount tables
    ln -s /proc/self/mounts "$buildroot/etc/mtab"
    >"$buildroot/etc/fstab"

    # indicate that this is an initramfs
    >"$buildroot/etc/initrd-release"

    # add a blank ld.so.conf to keep ldconfig happy
    >"$buildroot/etc/ld.so.conf"

    printf '%s' "$workdir"
}

run_build_hook() {
    local hook=$1 script= resolved=
    local MODULES=() BINARIES=() FILES=() SCRIPT=

    # find script in install dirs
    if ! script=$(PATH=$_d_install type -P "$hook"); then
        error "Hook '$hook' cannot be found"
        return 1
    fi

    # check for deprecation
    if resolved=$(readlink -e "$script") && [[ ${script##*/} != "${resolved##*/}" ]]; then
        warning "Hook '%s' is deprecated. Replace it with '%s' in your config" \
            "${script##*/}" "${resolved##*/}"
        script=$resolved
    fi

    # source
    unset -f build
    if ! . "$script"; then
        error 'Failed to read %s' "$script"
        return 1
    fi

    if ! declare -f build >/dev/null; then
        error 'Hook '$script' has no build function'
        return 1
    fi

    # run
    if (( _optquiet )); then
        msg2 "Running build hook: [%s]" "${script##*/}"
    else
        msg2 "Running build hook: [%s]" "$script"
    fi
    build

    # if we made it this far, return successfully. Hooks can
    # do their own error catching if it's severe enough, and
    # we already capture errors from the add_* functions.
    return 0
}


# 开始内核编译
build_kernel()
{
    cd "${_f_kernel_source}"

    # 先同步最先代码
    # 自己仓库主分支默认为 'master'
    # 上游取名为 'linux' 
    if [ ! -d "$out_dir" ]; then
        mkdir -p "$out_dir"
        if [ -d "$_f_kernel_source/.git" ]; then
            git fetch --all
            git checkout master
            git merge linux/master
            git push
        fi
    fi

    # 开始编译内核
    make bzImage -j32

    # 复制编译成功的文件
    if [ -f "$PWD/vmlinux" ]; then
        _msg_info "内核编译成功!"
        cp System.map   "$systemmap"
        cp "arch/x86/boot/bzImage" "$kernel"
    else
        _msg_error "内核编译失败!" -1
    fi

    # 开始编译内核模块
    #export INSTALL_MOD_STRIP=1
    #export INSTALL_MOD_PATH="$out_dir"
    _msg_info "make -j32 modules"
    make -j32 modules

    _msg_info "make -j32 modules_install"
    sudo make -j32 modules_install

    cd "$OLDPWD"
}

#
size_to_human() {
    awk -v size="$1" '
    BEGIN {
        suffix[1] = "B"
        suffix[2] = "KiB"
        suffix[3] = "MiB"
        suffix[4] = "GiB"
        suffix[5] = "TiB"
        count = 1

        while (size > 1024) {
            size /= 1024
            count++
        }

        sizestr = sprintf("%.2f", size)
        sub(/\.?0+$/, "", sizestr)
        printf("%s %s", sizestr, suffix[count])
    }'
}

gen_initramfs()
{
    if [ ! -f "$kernel" ]; then
        _msg_error "内核文件 '$kernel' 没有正确生成" -1
    fi

    _msg_info "mkinitcpio -r ${out_dir} -k ${kernel_version} -g ${initramfs}"
    mkinitcpio -k "${kernel_version}" -g "${initramfs}"
    sudo cp "${initramfs}" "/boot/"
}

# 解析参数
parseopts() 
{
    local opt= optarg= i= shortopts=$1
    local -a longopts=() unused_argv=()

    shift
    while [[ $1 && $1 != '--' ]]; do
        longopts+=("$1")
        shift
    done
    shift

    longoptmatch() {
        local o longmatch=()
        for o in "${longopts[@]}"; do
            if [[ ${o%:} = "$1" ]]; then
                longmatch=("$o")
                break
            fi
            [[ ${o%:} = "$1"* ]] && longmatch+=("$o")
        done

        case ${#longmatch[*]} in
            1)
                # success, override with opt and return arg req (0 == none, 1 == required)
                opt=${longmatch%:}
                if [[ $longmatch = *: ]]; then
                    return 1
                else
                    return 0
                fi ;;
            0)
                # fail, no match found
                return 255 ;;
            *)
                # fail, ambiguous match
                printf "%s: option '%s' is ambiguous; possibilities:%s\n" "${0##*/}" \
                    "--$1" "$(printf " '%s'" "${longmatch[@]%:}")"
                return 254 ;;
        esac
    }

    while (( $# )); do
        case $1 in
            --) # explicit end of options
                shift
                break
                ;;
            -[!-]*) # short option
                for (( i = 1; i < ${#1}; i++ )); do
                    opt=${1:i:1}

                    # option doesn't exist
                    if [[ $shortopts != *$opt* ]]; then
                        printf "%s: 参数不合法 -- '%s'\n" "${0##*/}" "$opt"
                        OPTRET=(--)
                        return 1
                    fi

                    OPTRET+=("-$opt")
                    # option requires optarg
                    if [[ $shortopts = *$opt:* ]]; then
                        if (( i < ${#1} - 1 )); then
                            OPTRET+=("${1:i+1}")
                            break
                        # if we're at the end, grab the the next positional, if it exists
                        elif (( i == ${#1} - 1 )) && [[ "$2" ]]; then
                            OPTRET+=("$2")
                            shift
                            break
                        # parse failure
                        else
                            printf "%s: 配置选项 '%s' 需要一个参数\n" "${0##*/}" "-$opt"
                            OPTRET=(--)
                            return 1
                        fi
                    fi
                done
                ;;
            --?*=*|--?*) # long option
                IFS='=' read -r opt optarg <<< "${1#--}"
                longoptmatch "$opt"
                case $? in
                    0)
                        if [[ $optarg ]]; then
                            printf "%s: 配置选项 '--%s' 无需任何参数\n" "${0##*/}" "$opt"
                            OPTRET=(--)
                            return 1
                        else
                            OPTRET+=("--$opt")
                        fi
                        ;;
                    1)
                        # --longopt=optarg
                        if [[ $optarg ]]; then
                            OPTRET+=("--$opt" "$optarg")
                        # --longopt optarg
                        elif [[ "$2" ]]; then
                            OPTRET+=("--$opt" "$2" )
                            shift
                        else
                            printf "%s: 配置选项 '--%s' 需要参数!\n" "${0##*/}" "$opt"
                            OPTRET=(--)
                            return 1
                        fi
                        ;;
                    254)
                        # ambiguous option -- error was reported for us by longoptmatch()
                        OPTRET=(--)
                        return 1
                        ;;
                    255)
                        # parse failure
                        printf "%s: 未定义的配置选项 '%s'\n" "${0##*/}" "--$opt"
                        OPTRET=(--)
                        return 1
                        ;;
                esac
                ;;
            *) # non-option arg encountered, add it as a parameter
                unused_argv+=("$1")
                ;;
        esac
        shift
    done

    # add end-of-opt terminator and any leftover positional parameters
    OPTRET+=('--' "${unused_argv[@]}" "$@")
    unset longoptmatch

    return 0
}

# 更新 grub 配置
update_grub()
{
    if [ ! -d "/etc/grub.d" ]; then
        _msg_error "检测到文件夹 /etc/grub.d 不存在!" -1
    fi

    # 添加自定义配置，开机显示 grub 菜单
    sudo cp "${work_dir}/00_header" "/etc/grub.d"
    sudo cp "${work_dir}/11_graceful" "/etc/grub.d"

    # 执行
    if [ -f "/usr/bin/update-grub" ]; then
        sudo update-grub -o "${grub_config}"
    elif [ -f "/usr/bin/grub-mkconfig" ]; then
        sudo grub-mkconfig -o "${grub_config}"
    else
        _msg_error "检测到 grub-mkconfig 或 update-grub 不存在!" -1
    fi
    
}

# 安装内核文件
kernel_install()
{
    # 检查内核文件是否生成
    if [ ! -f "${systemmap}" ]; then 
        _msg_error "没有生成 '${systemmap}'" -1
    fi

    if [ ! -f "${kernel}" ]; then 
        _msg_error "没有生成 '${kernel}'" -1
    fi

    if [ ! -f "${grub_config}" ]; then 
        _msg_error "没有生成 '${grub_config}'" -1
    fi

    # 开始安装
    if [ -f '/boot/System.map' ]; then
        sudo mv '/boot/System.map' '/boot/System.old'
    fi
    sudo cp "${systemmap}" '/boot/' 

    if [ -f "/boot/${kernel_name}" ]; then
        sudo rm -f "/boot/${kernel_name}"
    fi
    sudo cp "${kernel}" "/boot/${kernel_name}"
}

# 输出版本信息
version() 
{
    cat <<EOF
linux-config 当前版本: v$version
EOF
}

cleanup()
{
    local err=${1:-$?}

    #if [[ $_d_workdir ]]; then
    #    # when _optpreset is set, we're in the main loop, not a worker process
    #    if (( _optsavetree )) && [[ -z ${_optpreset[*]} ]]; then
    #        printf '%s\n' "${!_autodetect_cache[@]}" > "$_d_workdir/autodetect_modules"
    #        msg "build directory saved in %s" "$_d_workdir"
    #    else
    #        rm -rf "$_d_workdir"
    #    fi
    #fi

    exit "$err"
}

#####################
# 获取镜像的压缩方式
# @param 镜像路径
#####################
detect_file_type() {
    local bytes

    read -rd '' bytes < <(hexdump -n 6 -e '"%c"' "$1")
    case $bytes in
        '070701')
            # no compression
            echo
            return
            ;;
        $'\xfd7zXZ')
            echo 'xz'
            return
            ;;
    esac

    read -rd '' bytes < <(hexdump -n 4 -e '"%c"' "$1")
    if [[ $bytes = $'\x89LZO' ]]; then
        echo 'lzop'
        return
    fi

    read -rd '' bytes < <(hexdump -n 2 -e '"%x"' "$1")
    if [[ $bytes = '8b1f' ]]; then
        echo 'gzip'
        return
    fi

    read -rd '' bytes < <(hexdump -n 4 -e '"%x"' "$1")
    case $bytes in
        184d2204)
            error 'Newer lz4 stream format detected! This may not boot!'
            echo 'lz4'
            return
            ;;
        184c2102)
            echo 'lz4 -l'
            return
            ;;
        fd2fb528)
            echo 'zstd'
            return
            ;;
    esac

    read -rd '' bytes < <(hexdump -n 3 -e '"%c"' "$1")
    if [[ $bytes == 'BZh' ]]; then
        echo 'bzip2'
        return
    fi

    # lzma detection sucks and there's really no good way to
    # do it without reading large portions of the stream. this
    # check is good enough for GNU tar, apparently, so it's good
    # enough for me.
    read -rd '' bytes < <(hexdump -n 3 -e '"%x"' "$1")
    if [[ $bytes = '5d' ]]; then
        echo 'lzma'
        return
    fi

    if kver "$1" >/dev/null; then
        _msg_error "\"$1\" 是内核文件, 不是 initramfs 文件!" 1
    fi

    _msg_error "未知的文件格式, 你确定 \"$1\" 是一个 initramfs 文件?" 1
}

# 检查环境
check_env()
{
    cd "${_f_kernel_source}"

    # 开始清除上次编译的结果
    #make mrproper

    # 添加指定的配置文件
    cp "$_f_config" "$_f_kernel_source/.config"

    make prepare

    kernel_version=$(make -s 'kernelrelease')
    kernel_name="vmlinux-${kernel_version}-$(uname -m)"
    initramfs_name="initramfs-${kernel_version}-$(uname -m).img"

    module="$out_dir/lib/modules/${kernel_version}"
    kernel="$out_dir/${kernel_name}"
    initramfs="$out_dir/${initramfs_name}"

    _msg_info_pure "当前信息如下:"
    _msg_info_pure "                   时间戳: ${append_date}"
    _msg_info_pure "                 系统架构: $(uname -m)"
    _msg_info_pure "                 内核版本: ${kernel_version}"
    _msg_info_pure "             当前工作目录: ${work_dir}"
    _msg_info_pure "             内核配置文件: ${_f_config}"
    _msg_info_pure "             内核源码目录: ${_f_kernel_source}"
    _msg_info_pure "             输出结果目录: ${out_dir}"
    _msg_info_pure "             输出内核路径: ${kernel}"
    _msg_info_pure "        输出initramfs路径: ${initramfs}"
    _msg_info_pure "       输出System.map路径: ${systemmap}"
    _msg_info_pure "               mkinitcpio: $(type -p 'mkinitcpio')"
    _msg_info_pure "         输出grub配置路径: ${grub_config}"

    echo -e "\n\n"

    cd $OLDPWD
}

# 使用说明
usage() 
{
    cat <<EOF
linux-config 当前版本：v$version
使用: ${0##*/} [配置选项]

  配置选项:
   -c, --config <config>        使用指定的内核编译配置 (默认: $work_dir/config)
   -k, --kernel <dir>           指定内核源码目录（默认：/data/source/kernel）
   -a, --analyze <initramfs>    分析 initramfs 里的内容
   -l, --list <initramfs>       显示指定 initramfs 里的内容
   -v, --version                显示帮助信息并退出
   -r, --run                    开始生成内核文件并安装
   -q, --quiet                  显示更少信息（编译过程中的日志打印不输出）
   -h, --help                   显示此帮助信息并退出

EOF
}

process_preset() (
    local preset=$1 preset_cli_options=$2 preset_image= preset_options=
    local -a preset_mkopts preset_cmd
    if (( MKINITCPIO_PROCESS_PRESET )); then
        error "You appear to be calling a preset from a preset. This is a configuration error."
        cleanup 1
    fi

    # allow path to preset file, else resolve it in $_d_presets
    if [[ $preset != */* ]]; then
        printf -v preset '%s/%s.preset' "$_d_presets" "$preset"
    fi

    . "$preset" || die "Failed to load preset: \`%s'" "$preset"

    (( ! ${#PRESETS[@]} )) && warning "Preset file \`%s' is empty or does not contain any presets." "$preset"

    # Use -m and -v options specified earlier
    (( _optquiet )) || preset_mkopts+=(-v)
    (( _optcolor )) || preset_mkopts+=(-n)

    (( _optsavetree )) && preset_mkopts+=(-s)

    ret=0
    for p in "${PRESETS[@]}"; do
        msg "Building image from preset: $preset: '$p'"
        preset_cmd=("${preset_mkopts[@]}")

        preset_kver=${p}_kver
        if [[ ${!preset_kver:-$ALL_kver} ]]; then
            preset_cmd+=(-k "${!preset_kver:-$ALL_kver}")
        else
            warning "No kernel version specified. Skipping image \`%s'" "$p"
            continue
        fi

        preset_config=${p}_config
        if [[ ${!preset_config:-$ALL_config} ]]; then
            preset_cmd+=(-c "${!preset_config:-$ALL_config}")
        else
            warning "No configuration file specified. Skipping image \`%s'" "$p"
            continue
        fi

        preset_image=${p}_image
        if [[ ${!preset_image} ]]; then
            preset_cmd+=(-g "${!preset_image}")
        else
            warning "No image file specified. Skipping image \`%s'" "$p"
            continue
        fi

        preset_options=${p}_options
        if [[ ${!preset_options} ]]; then
            preset_cmd+=(${!preset_options}) # intentional word splitting
        fi

        preset_efi_image=${p}_efi_image
        if [[ ${!preset_efi_image:-$ALL_efi_image} ]]; then
            preset_cmd+=(-U "${!preset_efi_image:-$ALL_efi_image}")
        fi

        preset_microcode=${p}_microcode[@]
        if [[ ${!preset_microcode:-$ALL_microcode} ]]; then
            for mc in "${!preset_microcode:-${ALL_microcode[@]}}"; do
                preset_cmd+=(--microcode "$mc")
            done
        fi

        preset_cmd+=($OPTREST)
        msg2 "${preset_cmd[*]}"
        MKINITCPIO_PROCESS_PRESET=1 "$0" "${preset_cmd[@]}"
        (( $? )) && ret=1
    done

    exit $ret
)

arrayize_config() {
    set -f
    [[ ${MODULES@a} != *a* ]] && MODULES=($MODULES)
    [[ ${BINARIES@a} != *a* ]] && BINARIES=($BINARIES)
    [[ ${FILES@a} != *a* ]] && FILES=($FILES)
    [[ ${HOOKS@a} != *a* ]] && HOOKS=($HOOKS)
    [[ ${COMPRESSION_OPTIONS@a} != *a* ]] && COMPRESSION_OPTIONS=($COMPRESSION_OPTIONS)
    set +f
}



compute_hookset() {
    local h

    for h in "${HOOKS[@]}" "${_optaddhooks[@]}"; do
        in_array "$h" "${_optskiphooks[@]}" && continue
        _hooks+=("$h")
    done
}

# 生成 initramfs 文件
# @param kernel 版本
gen_initramfs() {
    # 生成临时文件
    tmpfile=$(mktemp -t mkinitcpio.XXXXXX)
    trap "rm $tmpfile" EXIT

    [[ -e /proc/self/mountinfo ]] || _msg_error "/proc 没有挂载!" 1
    [[ -e /dev/fd ]] || _msg_error "/dev 没有挂载!" 1

    if (( ${#opt_preset[*]} )); then
        map_process_preset "${opt_preset[@]}"
        exit
    fi

    if [[ ! -d $module ]]; then
        _msg_error "内核文件未生成!" 1
    fi

    arrayize_config

    compute_hookset

    if (( ${#_hooks[*]} == 0 )); then
        _msg_error "配置错误, 没找到 hooks"
    fi
}

# 列出 initramfs 文件内容
# @param image 绝对路径
list_initramfs() {
    img=
    if [ ${1:0:1} = "/" ]; then
        img="$1"
    else
        img="/boot/$1"
    fi

    if [ ! -f "$img" ]; then
        _msg_error "\"$img\" 文件不存在" 1
    fi

    compress=$(detect_file_type "${img}")

    ${compress:-cat} ${compress:+-cd} "$img" | bsdcpio --list
}

# 分析 initramfs 文件内容
# @param image 绝对路径
analyze_initramfs() {
    image=
    if [ ${1:0:1} = "/" ]; then
        image="$1"
    else
        image="/boot/$1"
    fi

    if [ ! -f "$image" ]; then
        _msg_error "\"$image\" 文件不存在" 1
    fi

    local -a binaries explicitmod modules foundhooks hooks
    local kernver ratio columns=$(tput cols) 

    workdir=$(mktemp -d --tmpdir lsinitcpio.XXXXXX)
    trap 'rm -rf "$workdir"' EXIT

    compress=$(detect_file_type "${image}")

    columns=${columns:-80}

    zsize=$(wc -c <"$image")

    if [[ $compress ]]; then
        decomptime=$(TIMEFORMAT=%R; { time ${compress:-cat} ${compress:+-cd} "$image" >/dev/null; } 2>&1)
        fullsize=$(${compress:-cat} ${compress:+-cd} "$image" | wc -c)
        ratio=.$(( zsize * 1000 / fullsize % 1000 ))
    fi

    ${compress:-cat} ${compress:+-cd} "$image" | bsdtar -C "$workdir" -xf - || _msg_error '解压缩镜像失败' 1

    modules=("$workdir/usr/lib/modules"/*/kernel/*.ko*)
    if [[ -f ${modules[0]} ]]; then
        IFS=/ read -r _ _ _ kernver _ <<<"${modules[0]#$workdir/}"
        modules=("${modules[@]##*/}")
        modules=("${modules[@]%.ko*}")
    else
        unset modules
    fi

    foundhooks=("$workdir"/hooks/*)
    [[ -f ${foundhooks[0]} ]] && foundhooks=("${foundhooks[@]##*/}") || unset foundhooks

    mapfile -t binaries < <(find "$workdir/usr/bin" -type f -printf %f\\n)

    # shellcheck disable=SC1090
    . "$workdir/config"

    explicitmod=($modules)

    # print results
    imagename=$image
    [[ -L $image ]] && imagename+=" -> $(readlink -e "$image")"
    _msg_info_pure "    镜像路径: $imagename"
    _msg_info_pure "        内核: ${kernver:-'未知'}"
    _msg_info_pure "        大小: $(size_to_human "$zsize")"

    if [[ $compress ]]; then
        _msg_info_pure "    压缩方式: ${compress:-'未压缩'}"
        _msg_info_pure "  未压缩大小: $(size_to_human \"$fullsize\") (压缩比率: $ratio)"
        _msg_info_pure "  解压缩时间: $decomptime"
    fi
    printf '\n'

    if (( ${#modules[*]} )); then
        _msg_info_pure "包含的模块:"
        for mod in "${modules[@]}"; do
            printf '  %s' "$mod"
            #in_array "${mod//_/-}" "${explicitmod[@]//_/-}" && printf ' [explicit]'
            printf '\n'
        done | sort | column -c$columns
        printf '\n'
    fi

    _msg_info_pure '包含的命令:'
    printf '  %s\n' "${binaries[@]}" | sort | column -c$columns
    printf '\n'

    if [[ $EARLYHOOKS ]]; then
        _msg_info_pure 'Early hook run order:'
        printf '  %s\n' $EARLYHOOKS
        printf '\n'
    fi

    if [[ $HOOKS ]]; then
        _msg_info_pure 'Hook run order:'
        printf '  %s\n' $HOOKS
        printf '\n'
    fi

    if [[ $LATEHOOKS ]]; then
        _msg_info_pure 'Late hook run order:'
        printf '  %s\n' $LATEHOOKS
        printf '\n'
    fi

    if [[ $CLEANUPHOOKS ]]; then
        _msg_info_pure 'Cleanup hook run order:'
        printf '  %s\n' $CLEANUPHOOKS
        printf '\n'
    fi
}

main() {
    _msg_info "开始检查脚本运行环境 ..."
    check_env

    _msg_info "接下来的操作需要提权 ..."

    _msg_info "开始编译内核 ..."
    build_kernel

    _msg_info "将内核文件安装到指定位置 ..."
    kernel_install

    _msg_info "开始生成 initramfs ..."
    gen_initramfs

    _msg_info "开始更新 grub 配置文件 ..."
    update_grub
}


##### main 开始
trap 'cleanup 130' INT
trap 'cleanup 143' TERM

_opt_short='c:k:o:l:a:hvqr'
_opt_long=('config:' 'addhooks:' 'kernel:' 'hookdir' : 'hookhelp:' 'grubOutput:' 'list:' 'analyze:' 'help' 'version' 'quiet' 'run')

parseopts "$_opt_short" "${_opt_long[@]}" -- "$@" || exit 1
set -- "${OPTRET[@]}"
unset _opt_short _opt_long OPTRET

while :; do
    case $1 in
        -c|--config)
            shift
            _f_config=$1
            ;;
        -l|--list)
            shift
            list_initramfs "$1"
            exit 0
            ;;
        -a|--analyze)
            shift
            analyze_initramfs "$1"
            exit 0
            ;;
        -q|--quiet)
            quiet=y
            ;;
        -o|--grubOutput)
            grubp="$1"
            if [[ x"$grubp" =~ ^x"/*" ]]; then
                grub_config="$1"
            else
                grub_config="${work_dir}/out/${append_date}/grub.cfg"
            fi
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -r|--run)
            canrun=true
            ;;
        -v|--version)
            version
            exit 0
            ;;
        -k|--kernel)
            shift
            _f_kernel_source=$1
            ;;
        --)
            shift
            break 2
            ;;
    esac
    shift
done

# 编译内核并安装
[[ $canrun ]] && main || usage

##### main 结束


